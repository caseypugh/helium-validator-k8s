#!/usr/bin/env bash
#
# Use "scripts/deploy restart" to both deploy new config and restart pods
# Otherwise you'll want to delete and recreate the pods manually
#

cd "$(dirname "$0")" || exit

source helper
source ../.env

CMD=$1

context=$(kubectl config current-context)
echo; echo -e "${GREEN}Deploying to $context...${NC}"

if [ -z "$NAMESPACE" ]; then
  echo "No namespace set. Defaulting to helium."
  NAMESPACE="helium"
fi

# Warn operator if we're out-of-date with our git remote
# Don't want to deploy an old version of the config on accident!
git remote update >/dev/null
UPSTREAM='@{u}'
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse "$UPSTREAM" 2>/dev/null)

if [ "$LOCAL" != "$REMOTE" ]; then
  echo "Warning, your local git checkout is not up-to-date"
  echo "Latest local commit: $LOCAL"
  echo "Latest remote commit: $REMOTE"
  [ -z "$REMOTE" ] && echo "(blank means you're in a local branch with no remote tracking branch)"

  echo
  read -r -p "Do you want to deploy anyway? [y/N] " response
  # response=${response,,} # tolower
  if [[ "$response" =~ ^(yes|y)$ ]]; then
    echo "Proceeding! YOLO"
  else
    echo "Aborting. Do a 'git pull' and try again."
    exit 1
  fi
fi

current_context=$(kubectl config current-context)
total_validators=1
validator_version=latest
TESTNET=
if [[ "$current_context" == "$MAINNET_CLUSTER" ]]; then
  total_validators=$TOTAL_MAINNET_VALIDATORS
  validator_version=$VALIDATOR_MAINNET_VERSION
elif [[ "$current_context" == "$TESTNET_CLUSTER" ]]; then
  total_validators=$TOTAL_TESTNET_VALIDATORS
  validator_version=$VALIDATOR_TESTNET_VERSION
  TESTNET=1
else
  echo "Warning, no TOTAL_*_VALIDATORS configured; defaulting to $total_validators"
  echo "Check that your .env file has all the keys from .env.sample"
fi
echo -e "Total validators: $(label $total_validators $GREEN)"
echo -e "Validator version: $(label $validator_version $GREEN)"
echo

namespaces=$(kubectl get namespaces)

# Automatically create the namespace if it doesn't exist
echo "Checking if $NAMESPACE namespace exists..."
if ! echo "$namespaces" | grep -q $NAMESPACE; then
  kubectl apply -f ../k8s/helium-ns.yml
fi

hostport_namespace="dynamic-hostports"
echo "Checking if $hostport_namespace exists..."
if ! echo "$namespaces" | grep -q "$hostport_namespace"; then
  echo "Installing $hostport_namespace"
  kubectl apply -f https://raw.githubusercontent.com/0blu/dynamic-hostports-k8s/master/deploy.yaml
else 
  echo "hostports release already exists"
fi

prometheus_namespace="kube-prometheus-stack"
echo "Checking if $prometheus_namespace exists..."
if ! echo "$namespaces" | grep -q "$prometheus_namespace"; then
  ./dashboard/setup
fi

validator_tpl=../k8s/validator.yml
validator_yml=../k8s/deploy.yml # tmp file

cp $validator_tpl $validator_yml

# Replace TOTAL_VALIDATORS with value from our selected environment variable
# Awkward replace command to make WSL & Mac compatible
{ rm "$validator_yml" && awk '{gsub("<TOTAL_VALIDATORS>", "'$total_validators'", $0); print}' > "$validator_yml"; } < "$validator_yml"

## Replace VALIDATOR_VERSION with value from local .env
{ rm "$validator_yml" && awk '{gsub("<VALIDATOR_VERSION>", "'$validator_version'", $0); print}' > "$validator_yml"; } < "$validator_yml"

# Determine which validator image to use
VALIDATOR_IMG="latest-validator-amd64" # default
if [ -n "$TESTNET" ]; then
  if [[ "$validator_version" == "latest" ]]; then
    VALIDATOR_IMG="latest-val-amd64"
  else
    VALIDATOR_IMG="miner-amd64_testnet_val${validator_version}"
  fi
else
  is_old_version=$(verlt $validator_version 1.3.0 && echo "old" || echo "new")

  if [[ "$validator_version" == "latest" ]]; then
    VALIDATOR_IMG="latest-validator-amd64"
  elif [[ "$is_old_version" == "old" ]]; then
    VALIDATOR_IMG="miner-amd64_validator${validator_version}"
  else
    VALIDATOR_IMG="validator-amd64_${validator_version}"
  fi
fi

echo -e "Setting validator image to: $(label "$VALIDATOR_IMG" $GREEN)"
{ rm "$validator_yml" && awk '{gsub("latest-validator-amd64", "'$VALIDATOR_IMG'", $0); print}' > "$validator_yml"; } < "$validator_yml"

# Apply the new configurations
kubectl apply -f ../k8s/helium-validators-configmap.yml -n $NAMESPACE
kubectl apply -f $validator_yml -n $NAMESPACE
kubectl apply -f ../k8s/exporter-service.yml -n $NAMESPACE

# Cleanup temp files
rm $validator_yml

if [[ $CMD == "restart" ]]; then
  ./restart pod 
fi

echo -e $(label "Finished!" $GREEN)
echo