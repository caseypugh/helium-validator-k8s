#!/bin/bash
#
# Use "scripts/deploy restart" to both deploy new config and restart pods
# Otherwise you'll want to delete and recreate the pods manually
#

cd $(dirname $0)

source helper
source ../.env

CMD=$1
POD_NAME=validator

context=$(kubectl config current-context)
echo; echo -e "${GREEN}Deploying to $context...${NC}"

if [ -z $NAMESPACE ]; then
  echo "No namespace set. Defaulting to helium."
  NAMESPACE="helium"
fi

# Warn operator if we're out-of-date with our git remote
# Don't want to deploy an old version of the config on accident!
git remote update >/dev/null
UPSTREAM='@{u}'
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse "$UPSTREAM" 2>/dev/null)

if [ "$LOCAL" != "$REMOTE" ]; then
  echo "Warning, your local git checkout is not up-to-date"
  echo "Latest local commit: $LOCAL"
  echo "Latest remote commit: $REMOTE"
  [ -z "$REMOTE" ] && echo "(blank means you're in a local branch with no remote tracking branch)"

  echo
  read -r -p "Do you want to deploy anyway? [y/N] " response
  # response=${response,,} # tolower
  if [[ "$response" =~ ^(yes|y)$ ]]; then
    echo "Proceeding! YOLO"
  else
    echo "Aborting. Do a 'git pull' and try again."
    exit 1
  fi
fi

# Abort on errors from here on out
set -e

# Automatically create the namespace if it doesn't exist
namespace_exists=$(kubectl get namespaces | grep $NAMESPACE)
if [ -z "$namespace_exists" ]; then
  kubectl create ns $NAMESPACE
fi

# Install dynamic-hostports
hostports_exists=$(kubectl get pods --all-namespaces | grep dynamic-hostports)
if [ -z "$hostports_exists" ]; then
  kubectl apply -f https://raw.githubusercontent.com/0blu/dynamic-hostports-k8s/master/deploy.yaml
fi

# Install kube-prometheus-stack
prom_exists=$(kubectl get pods --all-namespaces | grep kube-prometheus-stack)
if [ -z "$prom_exists" ]; then
  ./dashboard/install
fi

# Replace our <VALIDATOR_SETUP_SCRIPT> variable w/ contents of validator-setup.sh
validator_tpl=../k8s/validator.yml
validator_yml=../k8s/deploy.yml # tmp file
setup_script=../k8s/validator-setup.sh
setup_script_tmp=../k8s/tmp.sh

target="<VALIDATOR_SETUP_SCRIPT>"

# TODO make sure every line ends with a semicolon
# Delete any comments and newlines
grep -o '^[^#]*' $setup_script > $setup_script_tmp

# Add tab spacing to the bash script to match yml
repl=$(while IFS= read -r line; do echo -e "              $line"; done < $setup_script_tmp)

# Replace the target string in the yml
while IFS= read -r line; do
  echo "${line//$target/$repl}"
done < $validator_tpl > $validator_yml

# Get total validators needed for current context/environment
current_context=$(kubectl config current-context)
total_validators=1
if [[ "$current_context" == "$MAINNET_CLUSTER" ]]; then
  total_validators=$TOTAL_MAINNET_VALIDATORS
elif [[ "$current_context" == "$TESTNET_CLUSTER" ]]; then
  total_validators=$TOTAL_TESTNET_VALIDATORS
else
  echo "Warning, no TOTAL_*_VALIDATORS configured; defaulting to $total_validators"
  echo "Check that your .env file has all the keys from .env.sample"
fi

# Replace TOTAL_VALIDATORS with value from our selected environment variable
# Awkward replace command to make WSL & Mac compatible
{ rm $validator_yml && awk '{gsub("<TOTAL_VALIDATORS>", "'$total_validators'", $0); print}' > $validator_yml; } < $validator_yml

# Apply the new configurations
kubectl apply -f $validator_yml -n $NAMESPACE
kubectl apply -f ../k8s/exporter-service.yml -n $NAMESPACE

# Cleanup temp files
rm $validator_yml $setup_script_tmp

if [[ $CMD == "restart" ]]; then
  ./restart pod
fi

echo
