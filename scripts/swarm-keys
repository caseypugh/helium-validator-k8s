#!/bin/bash
cwd=$(dirname "$0"); cd $cwd;
source helper
source ../.env

CMD=$1

# Sign into 1password if enabled
op_logged_in=
hasop=$(command -v op)

if [ -n "$hasop" ] && [ -n "$OP_VAULT_UUID" ]; then
  op_logged_in=$(op list vaults)
  if [ -z "$op_logged_in" ]; then
    eval $(op signin)

    if [ -z "$(op list vaults)" ]; then
      echo "Failed to sign in."
      exit 1
    fi
    op_logged_in=1
  else
    echo "Signed into 1Password CLI"
  fi
fi

if [[ $CMD == "sync" ]]; then
  echo; echo -e "$(label "Downloading swarm_keys from cluster..." $GREEN)"

  # Loop through all the validators
  validator_count=$(kubectl get pods -n $NAMESPACE | grep -c "validator")
  for ((i = 0 ; i < validator_count ; i++)); do
    pod="validator-$i"
    echo; echo "Pod: $pod"

    miner_name=$(kubectl exec -it $pod -c validator -n $NAMESPACE -- sh -c "miner info name" | grep -oE "[a-z]+-[a-z]+-[a-z]+" | xargs)
    echo "Miner Name: $miner_name"

    mkdir -p keys
    mkdir -p "keys/$miner_name"

    # Download the swarm_key
    swarm_key_path=../keys/$miner_name/swarm_key

    kubectl cp $pod:/var/data/miner/swarm_key "$swarm_key_path" -c validator -n $NAMESPACE > /dev/null
    echo "Downloaded swarm_key to $swarm_key_path"

    # Save to 1password
    if [ ! -z "$op_logged_in" ]; then
      swarm_key_base64=
      if [ "$(uname)" == "Darwin" ]; then
        swarm_key_base64=$(base64 -e "$swarm_key_path")
      else # Assuming WSL here..
        swarm_key_base64=$(base64 -w 0 "$swarm_key_path")
      fi
      validator_login_title="$miner_name swarm_key"

      uuid=$(op list items | jq -r --arg title "$validator_login_title" '[.[] | select(.overview.title | contains($title))][0] | .uuid')
      if [ -z "$uuid" ] || [[ $uuid == "null" ]]; then
        echo "No swarm_key found in 1password. Creating one..."
        op create item login --vault "$OP_VAULT_UUID" title="$validator_login_title" password="$swarm_key_base64" notes="Automatically generated by helium-validator-k8s"
      else
        echo "swarm_key already saved in 1password"
      fi
    else
      echo; echo -e "$(label "Make sure you backup keys/$miner_name/swarm_key in 1password or place of choice." $RED)"
    fi
  done


elif [[ $CMD == "replace" ]]; then
  replica_id=$2

  if [ -z "$replica_id" ]; then
    echo "Please specify a replica_id"
    exit 1
  fi

  swarm_key_file_path=$3
  miner_name=

  # If using 1password and file isnt found, assume 3rd argument is miner name
  if [ ! -f "$swarm_key_file_path" ]; then
    miner_name=$swarm_key_file_path

    if [ -n "$op_logged_in" ]; then
      echo "Fetching swarm_key for $miner_name from 1Password"
      swarm_key_uuid=$(op list items | jq -r --arg title "$miner_name swarm_key" '[.[] | select(.overview.title | contains($title))][0] | .uuid')

      if [[ $swarm_key_uuid == "null" ]]; then
        echo "No swarm_key found!"
        exit 1
      fi

      # Decode the swarm_key into a tmp file
      op get item "$swarm_key_uuid" --fields password | base64 -d > tmp_swarm_key

      swarm_key_file_path=tmp_swarm_key
    else
      echo "File not found"
      swarm_key_file_path=
    fi
  fi

  if [ -f "$swarm_key_file_path" ]; then
    pod=validator-$replica_id

    echo; echo "Uploading swarm_key to $pod."
    kubectl cp "$swarm_key_file_path" "$pod:/var/data/miner/swarm_key" -c validator -n $NAMESPACE

    echo "Restarting $pod..."
    ./deploy restart "$replica_id"

    rm tmp_swarm_key 2> /dev/null
  fi

else
  echo "$0: don't understand command '$CMD'"
  exit 1
fi
